openapi: "3.0.0"
info:
  version: 1.0.0
  title: Game Management API
  description: API for managing games, staff, tasks and game events.
servers:
  - url: http://localhost:3000/api
paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        200:
          description: Health check successful. MongoDB is connected.
        500:
          description: Unable to connect to MongoDB.
  
  /game:
    get:
      summary: Retrieve all games
      responses:
        200:
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      summary: Create a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        200:
          description: The created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
    put:
      summary: Update a game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
          required: true
          description: The game ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        200:
          description: The updated game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
    delete:
      summary: Delete a game
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
          required: true
          description: The game ID
      responses:
        200:
          description: The deleted game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

components:
  schemas:
    Game:
      type: object
      required:
        - id
        - budget
        - morale
        - businessImpact
        - staff
        - tasks
        - events
        - timeRemaining
      properties:
        id:
          type: string
          description: The game ID
        budget:
          type: number
          description: The game budget
        morale:
          type: number
          description: The game morale
        businessImpact:
          type: string
          enum: [Low, Medium, High, Critical]
          description: The business impact of the game
        staff:
          type: array
          items:
            type: string
          description: The staff involved in the game
        tasks:
          type: array
          items:
            type: string
          description: The tasks involved in the game
        events:
          type: array
          items:
            type: string
          description: The events involved in the game
        timeRemaining:
          type: number
          description: The time remaining for the game

  /staff:
    get:
      summary: Retrieve a list of all staff members.
      responses:
        200:
          description: A list of all staff members.
        500:
          description: Server error.
    post:
      summary: Create a new staff member.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Staff'
      responses:
        201:
          description: The staff member was successfully created.
        400:
          description: Invalid staff data.
        500:
          description: Server error.
  /staff/{staffId}:
    get:
      summary: Retrieve a specific staff member by their ID.
      parameters:
        - in: path
          name: staffId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The staff member's information.
        404:
          description: Staff member not found.
        500:
          description: Server error.
    put:
      summary: Update a specific staff member's information.
      parameters:
        - in: path
          name: staffId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Staff'
      responses:
        200:
          description: The staff member was successfully updated.
        404:
          description: Staff member not found.
        500:
          description: Server error.
    delete:
      summary: Delete a specific staff member by their ID.
      parameters:
        - in: path
          name: staffId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The staff member was successfully deleted.
        404:
          description: Staff member not found.
        500:
          description: Server error.
  /staff/{staffId}/assign/{taskId}:
    put:
      summary: Assign a task to a specific staff member.
      parameters:
        - in: path
          name: staffId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: taskId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The task was successfully assigned.
        404:
          description: Staff member or task not found.
        500:
          description: Server error.
  /staff/{staffId}/morale:
    put:
      summary: Update a specific staff member's morale.
      parameters:
        - in: path
          name: staffId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newMorale:
                  type: number
      responses:
        200:
          description: The staff member's morale was successfully updated.
        404:
          description: Staff member not found.
        500:
          description: Server error.
components:
  schemas:
    Staff:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum: ['ROLE1', 'ROLE2', 'ROLE3']
        expertise:
          type: string
        ambition:
          type: number
        loyalty:
          type: number
        skillLevel:
          type: number
        resilience:
          type: number
        adaptability:
          type: number
        morale:
          type: number
        currentTask:
          type: string
openapi: 3.0.0
info:
  title: Game Event API
  version: 1.0.0
paths:
  /events:
    get:
      summary: Retrieve a list of all game events.
      responses:
        200:
          description: A list of all game events.
        500:
          description: Server error.
    post:
      summary: Create a new game event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameEvent'
      responses:
        201:
          description: The game event was successfully created.
        400:
          description: Invalid game event data.
        500:
          description: Server error.
  /events/{eventId}:
    get:
      summary: Retrieve a specific game event by their ID.
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The game event's information.
        404:
          description: Game event not found.
        500:
          description: Server error.
    put:
      summary: Update a specific game event's information.
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameEvent'
      responses:
        200:
          description: The game event was successfully updated.
        404:
          description: Game event not found.
        500:
          description: Server error.
    delete:
      summary: Delete a specific game event by their ID.
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The game event was successfully deleted.
        404:
          description: Game event not found.
        500:
          description: Server error.
components:
  schemas:
    GameEvent:
      type: object
      properties:
        type:
          type: string
          enum: ['Server Crash', 'Security Breach', 'Job Offer', 'Budget Cut']
        severity:
          type: number
        effectOnMorale:
          type: number
swagger: "2.0"
info:
  title: "Task API"
  version: "1.0.0"
  description: "This is the API for the task related operations."

paths:
  /api/tasks:
    get:
      summary: "Retrieve all tasks"
      responses:
        200:
          description: "A list of tasks."
          schema:
            type: "Array"
            items:
              $ref: "#/definitions/Task"
    post:
      summary: "Create a new task"
      parameters:
        - in: "body"
          name: "body"
          description: "Task object that needs to be added to the system."
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        201:
          description: "Task created successfully."
        400:
          description: "Invalid input."
  /api/tasks/{taskId}:
    get:
      summary: "Retrieve a task by ID"
      parameters:
        - in: "path"
          name: "taskId"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        404:
          description: "Task not found."
    put:
      summary: "Update an existing task"
      parameters:
        - in: "path"
          name: "taskId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Task object that needs to be updated."
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        200:
          description: "Task updated successfully."
        404:
          description: "Task not found."
        400:
          description: "Invalid input."
    delete:
      summary: "Deletes a task"
      parameters:
        - in: "path"
          name: "taskId"
          required: true
          type: "string"
      responses:
        200:
          description: "Task deleted successfully."
        404:
          description: "Task not found."

definitions:
  Task:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
          - "Bug Fix"
          - "New Feature"
          - "Security Patch"
      complexity:
        type: "integer"
        minimum: 1
        maximum: 10
      timeToComplete:
        type: "integer"
        minimum: 1
        maximum: 30
      assignedTo:
        type: "string"
      expertiseRequired:
        type: "string"
      criticality:
        type: "integer"
