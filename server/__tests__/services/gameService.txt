import { GameModel } from "../../src/models/Game";
import { IGame } from "../../src/types/types";
import mongoose from "mongoose";

const games: Array<Partial<IGame>> = [
  {
    _id: new mongoose.Types.ObjectId().toHexString(),
    budget: 1000,
    morale: 80,
    businessImpact: 90,
    staff: [],
    tasks: [],
    events: [],
    timeRemaining: 100,
  },
];

describe("GameService", () => {
  let mockSave: jest.Mock;

  beforeEach(() => {
    mockSave = jest.fn();
    jest.spyOn(GameModel.prototype, "save").mockImplementation(mockSave);
  });

  afterEach(() => {
    jest.restoreAllMocks();
    // delete mongoose.connection.models['Event'];
    jest.resetModules();
  });

  // afterEach(async () => {
  //   await GameModel.deleteMany({}).exec();
  // });
  

  test("should get all games", async () => {
    jest.spyOn(GameModel, "find").mockReturnValueOnce({
        // exec: jest.fn().mockResolvedValueOnce(games),
      } as any);

      const { GameService }  = require("../../src/services/gameService")
      const gameService = new GameService();

      const result = await gameService.getAllTasks();

      expect(result).toEqual(games);

  });



  test("should get a single game by id", async () => {});
  test("should create a game", async () => {});
  test("should update a game", async () => {});
  test("should delete a game", async () => {});
  test("should add staff to a game", async () => {});
  test("should remove staff from game", async () => {});
  test("should add task to game", async () => {});
  test("should remove task from game", async () => {});
  test("should add event to game", async () => {});
  test("should remove an event from game", async () => {});
});
